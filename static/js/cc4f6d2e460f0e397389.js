(self.webpackChunkrus_anonym=self.webpackChunkrus_anonym||[]).push([[3023],{5186:(r,n,e)=>{var o=e(3698),t=e(2505),i=e(6417),u=Function.bind,l=u.bind(u);function f(r,n,e){var o=l(i,null).apply(null,e?[n,e]:[n]);r.api={remove:o},r.remove=o,["before","error","after","wrap"].forEach((function(o){var i=e?[n,o,e]:[n,o];r[o]=r.api[o]=l(t,null).apply(null,i)}))}function s(){var r={registry:{}},n=o.bind(null,r);return f(n,r),n}var a=!1;function c(){return a||(console.warn('[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'),a=!0),s()}c.Singular=function(){var r={registry:{}},n=o.bind(null,r,"h");return f(n,r,"h"),n}.bind(),c.Collection=s.bind(),r.exports=c,r.exports.Hook=c,r.exports.Singular=c.Singular,r.exports.Collection=c.Collection},2505:r=>{r.exports=function(r,n,e,o){var t=o;r.registry[e]||(r.registry[e]=[]);"before"===n&&(o=function(r,n){return Promise.resolve().then(t.bind(null,n)).then(r.bind(null,n))});"after"===n&&(o=function(r,n){var e;return Promise.resolve().then(r.bind(null,n)).then((function(r){return t(e=r,n)})).then((function(){return e}))});"error"===n&&(o=function(r,n){return Promise.resolve().then(r.bind(null,n)).catch((function(r){return t(r,n)}))});r.registry[e].push({hook:o,orig:t})}},3698:r=>{r.exports=function r(n,e,o,t){if("function"!=typeof o)throw new Error("method for before hook must be a function");t||(t={});if(Array.isArray(e))return e.reverse().reduce((function(e,o){return r.bind(null,n,o,e,t)}),o)();return Promise.resolve().then((function(){return n.registry[e]?n.registry[e].reduce((function(r,n){return n.hook.bind(null,r,t)}),o)():o(t)}))}},6417:r=>{r.exports=function(r,n,e){if(!r.registry[n])return;var o=r.registry[n].map((function(r){return r.orig})).indexOf(e);if(-1===o)return;r.registry[n].splice(o,1)}}}]);